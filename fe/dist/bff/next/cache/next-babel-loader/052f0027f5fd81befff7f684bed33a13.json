{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport TwAppsConst from \"../../TwAppsConst\";\nimport MutedTweet from \"../../atoms/Tweet\";\n// 子コンポーネントの高さを取得するためにwapperで包む\nvar ItemWrapper = styled.li.withConfig({\n  displayName: \"TweetList__ItemWrapper\",\n  componentId: \"qcuuci-0\"\n})([\"\"]);\nvar List = styled.ul.withConfig({\n  displayName: \"TweetList__List\",\n  componentId: \"qcuuci-1\"\n})([\"overflow:hidden;transition:.5s;max-height:\", \"px;border-top:\", \";\"], function (_ref) {\n  var maxHeight = _ref.maxHeight;\n  return maxHeight;\n}, function (_ref2) {\n  var theme = _ref2.theme,\n      visible = _ref2.visible;\n  return visible ? \"1px solid \".concat(theme.colors.darkGray) : 'none';\n});\n\n/**\n * ツイートのリスト\n * 渡された開閉状態に応じてリストの内容のコンテンツ高さに応じた開閉アニメーションを行う\n * @param {ShowTweets} showTweets 開閉状態を示す定数値\n * @param {TweetsInfo[]} mutedTweets ツイート情報の配列\n */\nvar TweetList = function TweetList(_ref3) {\n  var showTweets = _ref3.showTweets,\n      mutedTweets = _ref3.mutedTweets;\n\n  var _useState = useState(0),\n      maxHeight = _useState[0],\n      setMaxHeight = _useState[1];\n\n  var itemWrapperRefs = [];\n  mutedTweets.forEach(function () {\n    itemWrapperRefs.push(React.createRef());\n  });\n  useEffect(function () {\n    var height = 0;\n    itemWrapperRefs.forEach(function (ref) {\n      height += ref.current.clientHeight;\n    });\n    setMaxHeight(height);\n  }, [showTweets]);\n  return __jsx(List, {\n    visible: showTweets === TwAppsConst.SHOW_TWEETS_OPENED,\n    maxHeight: showTweets === TwAppsConst.SHOW_TWEETS_OPENED ? maxHeight : 0\n  }, mutedTweets.map(function (mutedTweet, index) {\n    return __jsx(ItemWrapper, {\n      ref: itemWrapperRefs[index],\n      key: mutedTweet.tweet_id\n    }, __jsx(MutedTweet, {\n      mutedTweet: mutedTweet\n    }));\n  }));\n};\n\nexport default TweetList;","map":null,"metadata":{},"sourceType":"module"}