{"ast":null,"code":"import { setErrMessage } from \"../page/errMessage\";\nimport { startUserRequest, endUserRequest } from \"../meta/userRequestStatus\";\nimport { startMuteRequest, endMuteRequest } from \"../meta/muteRequestStatus\";\nimport { setMuted } from \"./muted\";\nimport { toggleMuted } from \"./muted\";\nimport requestToServer from \"../../../modules/requestToServer\";\nexport const ACTION_CHANGE_MUTED_USERS = \"CHANGE_MUTED_USERS\";\nexport const setMutedUsers = mutedUsers => ({\n  type: ACTION_CHANGE_MUTED_USERS,\n  payload: mutedUsers\n});\n/**\n * ミュートユーザー一覧APIにリクエストを発行し、結果をdispatchする\n * @param {string} endpoint APIエンドポイント\n * @param {Dispatch} dispatch\n * @param {object} params 追加で渡すパラメータ　デフォルトは{}\n */\n\nexport const requestMutedUsers = (endpoint, dispatch, params = {}) => {\n  dispatch(startUserRequest());\n  requestToServer(endpoint, params).then(({\n    data\n  }) => {\n    if (\"code\" in data[0]) {\n      dispatch(setErrMessage(data[0].message));\n      dispatch(endUserRequest());\n      return;\n    } // 全てミュートフラグを立てた配列をミュートの初期値としてdispatch\n    // ユーザーリストよりも先にこちらを作る（依存しているため）\n\n\n    const initializedMuted = Array(data.length).fill(true);\n    dispatch(setMuted(initializedMuted));\n    dispatch(endUserRequest()); // ミュートユーザーをstoreに登録\n\n    dispatch(setMutedUsers(data));\n  });\n};\nexport const requestUnmuteUser = (endpoint, screenName, index, dispatch) => {\n  dispatch(startMuteRequest());\n  requestToServer(endpoint, {}).then(({\n    data\n  }) => {\n    // ミュート解除に成功した場合はユーザー情報objectが返される\n    // スクリーンネームを照合して成否を確認する\n    dispatch(endMuteRequest());\n\n    if (data.screen_name === screenName) {\n      dispatch(toggleMuted(index));\n    }\n  });\n};\n\nconst mutedUsers = (state = [], action) => {\n  switch (action.type) {\n    case ACTION_CHANGE_MUTED_USERS:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default mutedUsers;","map":null,"metadata":{},"sourceType":"module"}