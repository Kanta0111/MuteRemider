{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport TwAppsConst from \"../../TwAppsConst\";\nimport MutedTweet from \"../../atoms/Tweet\";\n// 子コンポーネントの高さを取得するためにwapperで包む\nconst ItemWrapper = styled.li.withConfig({\n  displayName: \"TweetList__ItemWrapper\",\n  componentId: \"qcuuci-0\"\n})([\"\"]);\nconst List = styled.ul.withConfig({\n  displayName: \"TweetList__List\",\n  componentId: \"qcuuci-1\"\n})([\"overflow:hidden;transition:.5s;max-height:\", \"px;border-top:\", \";\"], ({\n  maxHeight\n}) => maxHeight, ({\n  theme,\n  visible\n}) => visible ? `1px solid ${theme.colors.darkGray}` : 'none');\n\n/**\n * ツイートのリスト\n * 渡された開閉状態に応じてリストの内容のコンテンツ高さに応じた開閉アニメーションを行う\n * @param {ShowTweets} showTweets 開閉状態を示す定数値\n * @param {TweetsInfo[]} mutedTweets ツイート情報の配列\n */\nconst TweetList = ({\n  showTweets,\n  mutedTweets\n}) => {\n  const {\n    0: maxHeight,\n    1: setMaxHeight\n  } = useState(0);\n  const itemWrapperRefs = [];\n  mutedTweets.forEach(() => {\n    itemWrapperRefs.push(React.createRef());\n  });\n  useEffect(() => {\n    let height = 0;\n    itemWrapperRefs.forEach(ref => {\n      height += ref.current.clientHeight;\n    });\n    setMaxHeight(height);\n  }, [showTweets]);\n  return __jsx(List, {\n    visible: showTweets === TwAppsConst.SHOW_TWEETS_OPENED,\n    maxHeight: showTweets === TwAppsConst.SHOW_TWEETS_OPENED ? maxHeight : 0\n  }, mutedTweets.map((mutedTweet, index) => __jsx(ItemWrapper, {\n    ref: itemWrapperRefs[index],\n    key: mutedTweet.tweet_id\n  }, __jsx(MutedTweet, {\n    mutedTweet: mutedTweet\n  }))));\n};\n\nexport default TweetList;","map":null,"metadata":{},"sourceType":"module"}